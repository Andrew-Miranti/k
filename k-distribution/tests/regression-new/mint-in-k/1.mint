assert bitwidthMInt(mi(8, 0)) ==Int 8 ;
assert bitwidthMInt(mi(1, 0)) ==Int 1 ;
assert uvalueMInt(mi(2, 2)) ==Int 2 ;
assert svalueMInt(mi(4, 9)) ==Int -7 ;
assert uvalueMInt(mi(4, 9)) ==Int 9 ;
assert notBool zeroMInt(mi(4, 2)) ;
assert zeroMInt(mi(4, 0)) ;
assert sminMInt(4) ==Int -8 ;
assert sminMInt(8) ==Int -128 ;
assert smaxMInt(4) ==Int 7 ;
assert smaxMInt(8) ==Int 127 ; 
assert uminMInt(1) ==Int 0 ; 
assert uminMInt(20) ==Int 0 ; 
assert umaxMInt(1) ==Int 1 ; 
assert umaxMInt(32) ==Int 4294967295 ; 
assert soverflowMInt(4, 15) ; 
assert soverflowMInt(16, 100000) ; 
assert notBool soverflowMInt(4, -2) ; 
assert soverflowMInt(4, -1000) ; 
assert uoverflowMInt(128, -1) ; 
assert uoverflowMInt(16, 100000) ; 
assert notBool uoverflowMInt(32, 40) ; 
assert uvalueMInt(miMInt(ListItem(mi(5, 16)) ListItem(false))) ==Int 16 ; 
assert notBool overflowMInt(ListItem(mi(5, 16)) ListItem(false)) ; 
assert overflowMInt(ListItem(mi(5, 16)) ListItem(true)) ; 
assert uvalueMInt(addMInt(mi(5, 12), mi(5, 11))) ==Int 23 ; 
assert uvalueMInt(addMInt(mi(4, 12), mi(4, 11))) ==Int 7 ; 
assert svalueMInt(addMInt(mi(4, 7), mi(4, 1))) ==Int -8 ; 
assert uvalueMInt(subMInt(mi(8, 42), mi(8, 24))) ==Int 18 ; 
assert svalueMInt(subMInt(mi(8, 42), mi(8, 44))) ==Int -2 ; 
assert uvalueMInt(subMInt(mi(8, 0), mi(8, 1))) ==Int umaxMInt(8) ; 
assert svalueMInt(mulMInt(mi(8, 2), mi(8, -4))) ==Int -8 ; 
assert svalueMInt(mulMInt(mi(8, -2), mi(8, -4))) ==Int 8 ; 
assert svalueMInt(mulMInt(mi(3, 2), mi(3, -4))) ==Int 0 ; 
assert svalueMInt(miMInt(sdivMInt(mi(4, 6), mi(4, -2)))) ==Int -3 ; 
assert notBool overflowMInt(sdivMInt(mi(4, 6), mi(4, -2))) ; 
assert svalueMInt(miMInt(sdivMInt(mi(4, 6), mi(4, 8)))) ==Int 0 ; 
assert uvalueMInt(miMInt(sdivMInt(mi(31, sminMInt(31)), mi(31, -1)))) ==Int 1073741824 ;
assert overflowMInt(sdivMInt(mi(4, -8), mi(4, -1))) ; 
assert svalueMInt(miMInt(sremMInt(mi(4, -8), mi(4, -1)))) ==Int 0 ; 
assert overflowMInt(sremMInt(mi(4, -8), mi(4, -1))) ; 
assert uvalueMInt(udivMInt(mi(5, 18), mi(5, 4))) ==Int 4 ; 
assert uvalueMInt(udivMInt(mi(5, 1), mi(5, 4))) ==Int 0 ;
assert uvalueMInt(uremMInt(mi(5, 18), mi(5, 4))) ==Int 2 ; 
assert uvalueMInt(uremMInt(mi(5, 18), mi(5, 2))) ==Int 0 ; 
assert svalueMInt(miMInt(saddMInt(mi(5, 2), mi(5, 10)))) ==Int 12 ; 
assert notBool overflowMInt(saddMInt(mi(5, 2), mi(5, 10))) ;
assert svalueMInt(miMInt(saddMInt(mi(5, 2), mi(5, -10)))) ==Int -8 ; 
assert notBool overflowMInt(saddMInt(mi(5, 2), mi(5, -10))) ;
assert svalueMInt(miMInt(saddMInt(mi(5, -1), mi(5, -16)))) ==Int 15 ;
assert overflowMInt(saddMInt(mi(5, -1), mi(5, -16))) ; 
assert svalueMInt(miMInt(saddMInt(mi(5, -1), mi(5, 15)))) ==Int 14 ;
assert notBool overflowMInt(saddMInt(mi(5, -1), mi(5, 15))) ;
assert svalueMInt(miMInt(saddMInt(mi(5, 1), mi(5, 15)))) ==Int -16 ;
assert overflowMInt(saddMInt(mi(5, 1), mi(5, 15))) ;
assert svalueMInt(miMInt(ssubMInt(mi(5, -1), mi(5, -16)))) ==Int 15 ;
assert notBool overflowMInt(ssubMInt(mi(5, -1), mi(5, -16))) ;
assert svalueMInt(miMInt(ssubMInt(mi(5, -1), mi(5, 15)))) ==Int -16 ;
assert notBool overflowMInt(ssubMInt(mi(5, -1), mi(5, 15))) ;
assert svalueMInt(miMInt(ssubMInt(mi(5, -2), mi(5, 15)))) ==Int 15 ;
assert overflowMInt(ssubMInt(mi(5, -2), mi(5, 15))) ;
assert svalueMInt(miMInt(ssubMInt(mi(5, 10), mi(5, -6)))) ==Int -16 ;
assert overflowMInt(ssubMInt(mi(5, 10), mi(5, -6))) ;
assert svalueMInt(miMInt(smulMInt(mi(5, 10), mi(5, 2)))) ==Int -12 ;
assert overflowMInt(smulMInt(mi(5, 10), mi(5, 2))) ;
assert uvalueMInt(miMInt(uaddMInt(mi(5, 10), mi(5, 10)))) ==Int 20 ;
assert notBool overflowMInt(uaddMInt(mi(5, 10), mi(5, 10))) ;
assert uvalueMInt(miMInt(uaddMInt(mi(5, 10), mi(5, 30)))) ==Int 8 ;
assert overflowMInt(uaddMInt(mi(5, 10), mi(5, 30))) ;
assert uvalueMInt(miMInt(umulMInt(mi(5, 10), mi(5, 3)))) ==Int 30 ;
assert notBool overflowMInt(umulMInt(mi(5, 10), mi(5, 3))) ;
assert uvalueMInt(miMInt(umulMInt(mi(5, 10), mi(5, 4)))) ==Int 8 ;
assert overflowMInt(umulMInt(mi(5, 10), mi(5, 4))) ;
assert uvalueMInt(shlMInt(mi(3, 6), 1)) ==Int 4 ;
assert uvalueMInt(shlMInt(mi(3, 6), 2)) ==Int 0 ;
assert uvalueMInt(shlMInt(mi(8, 51), 3)) ==Int 152 ;
assert uvalueMInt(ashrMInt(mi(8, 127), 2)) ==Int 31 ;
assert uvalueMInt(ashrMInt(mi(8, 7), 1)) ==Int 3 ;
assert uvalueMInt(ashrMInt(mi(8, 192), 3)) ==Int 248 ;
assert uvalueMInt(ashrMInt(mi(8, 192), 0)) ==Int 192 ;
assert uvalueMInt(ashrMInt(mi(8, 128), 0)) ==Int 128 ;
assert uvalueMInt(lshrMInt(mi(8, 192), 3)) ==Int 24 ;
assert uvalueMInt(lshrMInt(mi(8, 7), 8)) ==Int 0 ;
assert uvalueMInt(andMInt(mi(8, 97), mi(8, 66))) ==Int 64 ;
assert uvalueMInt(orMInt(mi(8, 97), mi(8, 66))) ==Int 99 ;
assert uvalueMInt(xorMInt(mi(8, 97), mi(8, 66))) ==Int 35 ;
assert uvalueMInt(negMInt(mi(8, 128))) ==Int 127 ; 
assert sltMInt(mi(8, 128), mi(8, 127)) ;
assert notBool sltMInt(mi(128, 128), mi(128, 127)) ; 
assert notBool ultMInt(mi(8, 128), mi(8, 127)) ; 
assert notBool ultMInt(mi(128, 128), mi(128, 127)) ;
assert ultMInt(mi(8, 12), mi(8, 127)) ; 
assert notBool ultMInt(mi(8, 12), mi(8, 12)) ;
assert sleMInt(mi(8, 128), mi(8, 127)) ;
assert notBool sleMInt(mi(128, 128), mi(128, 127)) ; 
assert notBool uleMInt(mi(8, 128), mi(8, 127)) ;
assert notBool uleMInt(mi(128, 128), mi(128, 127)) ;
assert uleMInt(mi(8, 12), mi(8, 127)) ;
assert uleMInt(mi(8, 12), mi(8, 12)) ;
assert sgtMInt(mi(9, 128), mi(9, 127)) ;
assert notBool sgtMInt(mi(128, 2), mi(128, 127)) ;
assert sgtMInt(mi(8, 12), mi(8, -2)) ;
assert ugtMInt(mi(128, 128), mi(128, 127)) ;
assert notBool ugtMInt(mi(8, 12), mi(8, 127)) ;
assert notBool ugtMInt(mi(8, 12), mi(8, 128)) ;
assert eqMInt(mi(8, 12), mi(8, 12)) ; 
assert eqMInt(mi(8, -2), mi(8, -2)) ;
assert notBool eqMInt(mi(8, -1), mi(8, 129)) ;
assert notBool neMInt(mi(8, 12), mi(8, 12)) ;
assert notBool neMInt(mi(8, -2), mi(8, -2)) ;
assert neMInt(mi(8, -1), mi(8, 129)) ;
assert svalueMInt(sMaxMInt(mi(8, 127), mi(8, -12))) ==Int 127 ;
assert svalueMInt(sMaxMInt(mi(8, 128), mi(8, -12))) ==Int -12 ;
assert svalueMInt(sMinMInt(mi(8, 127), mi(8, -12))) ==Int -12 ; 
assert svalueMInt(sMinMInt(mi(8, 128), mi(8, -12))) ==Int -128 ;
assert bitwidthMInt(concatenateMInt(mi(8, 128), mi(4, 12))) ==Int 12 ;
assert uvalueMInt(concatenateMInt(mi(8, 128), mi(4, 12))) ==Int 2060 ;
assert uvalueMInt(extractMInt(mi(8, 128), 0, 2)) ==Int 2 ;
assert svalueMInt(addMInt(mi(32, -1), mi(32, 4294967295))) ==Int -2 ;
assert uvalueMInt(addMInt(mi(32, -1), mi(32, 4294967295))) ==Int 4294967294 ;
assert svalueMInt(addMInt(mi(31, -1), mi(31, 4294967295))) ==Int -2 ; 
assert uvalueMInt(addMInt(mi(31, -1), mi(31, 4294967295))) ==Int 2147483646 ;
assert svalueMInt(miMInt(saddMInt(mi(32, smaxMInt(32)), mi(32, 1)))) ==Int sminMInt(32) ;
assert overflowMInt(saddMInt(mi(32, smaxMInt(32)), mi(32, 1))) ;
assert uvalueMInt(miMInt(usubMInt(mi(32, 0), mi(32, -1)))) ==Int 1 ;
assert overflowMInt(usubMInt(mi(32, 0), mi(32, -1))) ;
assert uvalueMInt(miMInt(saddMInt(mi(31, smaxMInt(31)), mi(31, 1)))) ==Int 1073741824 ;
assert overflowMInt(saddMInt(mi(31, smaxMInt(31)), mi(31, 1))) ;
assert uvalueMInt(miMInt(usubMInt(mi(31, 0), mi(31, -1)))) ==Int 1 ;
assert overflowMInt(usubMInt(mi(31, 0), mi(31, -1))) ;
assert uvalueMInt(miMInt(sdivMInt(mi(32, sminMInt(32)), mi(32, -1)))) ==Int 2147483648;
assert overflowMInt(sdivMInt(mi(32, sminMInt(32)), mi(32, -1))) ;
assert uvalueMInt(miMInt(sremMInt(mi(32, sminMInt(32)), mi(32, -1)))) ==Int 0 ;
assert overflowMInt(sremMInt(mi(32, sminMInt(32)), mi(32, -1))) ;
assert uvalueMInt(miMInt(sdivMInt(mi(31, sminMInt(31)), mi(31, -1)))) ==Int 1073741824;
assert overflowMInt(sdivMInt(mi(31, sminMInt(31)), mi(31, -1))) ;
assert uvalueMInt(miMInt(sremMInt(mi(31, sminMInt(31)), mi(31, -1)))) ==Int 0 ;
assert overflowMInt(sremMInt(mi(31, sminMInt(31)), mi(31, -1))) ;
assert uvalueMInt(miMInt(sdivMInt(mi(32, smaxMInt(32)), mi(32, -10)))) ==Int 4080218932;
assert notBool overflowMInt(sdivMInt(mi(32, sminMInt(32)), mi(32, -10))) ;
assert uvalueMInt(miMInt(sremMInt(mi(32, smaxMInt(32)), mi(32, -10)))) ==Int 7 ;
assert notBool overflowMInt(sremMInt(mi(32, sminMInt(32)), mi(32, -10))) ;
assert uvalueMInt(miMInt(sdivMInt(mi(31, smaxMInt(31)), mi(31, -10)))) ==Int 2040109466;
assert notBool overflowMInt(sdivMInt(mi(31, sminMInt(31)), mi(31, -10))) ;
assert uvalueMInt(miMInt(sremMInt(mi(31, smaxMInt(31)), mi(31, -10)))) ==Int 3 ;
assert notBool overflowMInt(sremMInt(mi(31, sminMInt(32)), mi(31, -10))) ;
assert svalueMInt(andMInt(lshrMInt(mi(32, -1), 29), shlMInt(mi(32, 3), 1))) ==Int 6 ;
assert svalueMInt(andMInt(lshrMInt(mi(32, -1), 28), shlMInt(mi(32, 3), 1))) ==Int 6 ;
assert sltMInt(mi(32, -1), mi(32, 0)) ;
assert notBool uleMInt(mi(32, -1), mi(32, 0)) ;
assert sltMInt(mi(31, -1), mi(31, 0)) ;
assert notBool uleMInt(mi(31, -1), mi(31, 0)) ;
assert svalueMInt(mIntOfDigits(digitsOfMInt(mi(32, -1), 8, 4))) ==Int -1 ;
assert svalueMInt(mIntOfDigits(digitsOfMInt(mi(31, -1), 8, 3))) ==Int -1 ;
assert uvalueMInt(concatenateMInt(extractMInt(mi(32, 10), 28, 31), extractMInt(mi(32, 10), 29, 32))) ==Int 42 ;
assert uvalueMInt(concatenateMInt(extractMInt(mi(31, 10), 27, 30), extractMInt(mi(31, 10), 28, 31))) ==Int 42 ;
